
* Day one
- input: several lines
- each line has a number or blank
- blank indicates end of group
- for each group, calculate sum of numbers in their lines
- first output: max amount in a group
- second output: total of the top 3 groups

#+begin_src clojure
(ns advofcode.dayone
  (:require [clojure.string :as str]))

(defn split-file-into-groups [file-content]
  (->> file-content
       (str/split-lines)
       (partition-by #(= % ""))
       (remove #(= % [""]))
       ))

(defn sum-group [arr-of-strings]
  (->> arr-of-strings
       (map read-string)
       (reduce +)
       ))

(let [file-content (slurp "data/day-one.txt")
      groups       (split-file-into-groups file-content)
      sums         (map sum-group groups)
      max          (reduce max sums)
      top-three    (take 3 (reverse (sort sums)))
      ]
  (reduce + top-three)
  )
#+end_src

