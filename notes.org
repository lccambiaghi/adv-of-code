
* Day one
- input:
  + several lines
  + each line has a number or blank
  + blank indicates end of group
- transformation:
  + for each group, calculate sum of numbers in their lines
- first output:
  + max amount in a group
- second output:
  + total of the top 3 groups

* Day two
- Input:
  + Several lines
  + In each line you have two letters: [A, B, C ] and [X, Y, Z]
  + A=X=rock, B=Y=paper, C=Z=scissor
- First transform:
  + For each line compute score = score_shape + score_win
  + score_shape: A=1, B=2, C=3
  + score_wind: win=6, draw=3, loss=0
  + NOTE: need to handle 2 special cases (A vs. Z and C vs. X)
- Second transform:
  + Now X is loss, Y is draw and Z is win (one part of the score is already calculated)
  + Need to map first column to corresponding shape to get second part of the score
- Outputs:
  + Total score according to first transform
  + Total score according to second transform

* Day three
- Input
  + Multiple lines
  + In every line many letters, lowercase and uppercase
  + Lowercase letters represent item type 1 and uppercase item type 2
  + Each line represents a rucksack
  + First half of line represents first compartment
- First transformation:
  + Map letters to numbers (priority) (a -> 1, ... z -> 26, A -> 27, ... Z -> 52)
  + Find letter present in both compartments and calculate its priority
- Second transformation:
  + Every 3 lines form a group
  + Find item common among the 3 groups
  + Map it to a priority
- Outputs:
  + Sum of priorities over lines
  + Sum of priority over groups
* Day four
- Input
  + Multiple lines
  + Every line indicates two ranges: 2-4,6-8
- Transform:
  + Identify whether one of the two ranges is fully included in the other
- Output
  + Number of lines where the condition is true
* Day five
- Input:
  + First block is initial state of the queues
    * State looks like this:
#+begin_src 
    [D]    
[N] [C]    
[Z] [M] [P]
 1   2   3 
#+end_src
  + Second block is series of instruction
    * Instruction looks like this:
#+begin_src 
move 4 from 2 to 1
#+end_src
- Transform:
  + Parse initial state in queues
  + Move elements from one queue to another
- Output:
  + The letter at the top of the crates, e.g. ~NDP~ in the initial state

* Day six
- Input:
  + One line
- First transform:
  + Find first char such that
    * Taken that char + previous 3 chars
    * 4 chars are different
- Second transform:
  + Same as first transform, but consider groups of 14 chars
- Output:
  + Index of that char (1-based-indexing)
* Day seven
- Input:
  + Lines
  + Each line is either a command (~$ cd dir~, ~$ ls~) 
  + or the output of ~ls~ which shows folders and files inside e.g.
#+begin_src 
dir gjc
dir lcz
218543 ndqmcv
dir qnj
dir rrdd
dir zppsglq
#+end_src
- First transform:
  + Build the file system tree based on the output
  + Compute size of directories
- Second transform:
  + Total disk is 70.000.000
  + We need 30.000.000 free
  + Get size of outmost directory
  + Calculate space_to_free = 30M - size_outmost_directory
  + Find smallest directory bigger than space_to_free
- Output:
  + Total size of directories, considering directories with a maximum size of 100.000
